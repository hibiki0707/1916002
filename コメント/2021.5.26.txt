文字は意外とややこしい
文字コードと文字セット
マルチバイト文字とワイド文字
ｱｲｳｴｵ（半角カタカナ）
アイウエオ（全角カタカナ）

所謂全角文字っいうのは、charを２つ以上組み合わせて
1つの文字を形成している。

この形成の仕方にルールがあって、しかもの本後であっても
（英語圏以外のところ、日本語に限りませんが）
いくつか種類があります。WindowsはだいたいSJISです。
MacとかLinuxとかになると、日本語でもUTF-8とかが主流
sakuraエディタとかだったら、保存時に文字コードを選べる
ですが、OS自体のデフォルトの文字コードが決まっているので
だいたい、SJISで保存される（VisualStudioとかもそう）
（※IITF-8もBOMあり/なしがあったりして、ややこしい）
　

プログラムをバグらせた時の対応
①エラーメッセージをきちんと読みましょう。
　　　読めるようになってください。
　　　ちょっと見本語が難しいので、エラーコードで
　　　検索してください。
　　　説明が分かりづらい場合はその横にあるC3861などの
　　　エラーコードで検索しよう。
②バグを隠蔽しない。仮に隠蔽の結果動くようになっても
バグが潜在化して、探しづらくなってるだけ
寧ろバグをたくさん、羽目に発生させましょう。
③assertを活用しましょう（あえてクラッシュするやる）
　　　これは条件に合わない時にクラッシュすることで、
　　　予想外の値がどこで飛んできてるかがわかる。


外部の性的ライブラリのリンクを指定する方法
①リンク→ライブラリ→入力にライブラリ名を記入
②コード中に#pragma comment'lib,ライブラリ名）

DxLibやEffekseerほど親切じゃないライブラリを使う際には
注意しよう。

例えば#include"Debug.h"として、これをDebug.cppと
main.cppがインクルードしている場合、リンク時にエラーが発生します。
これを回避するためには、2つやり方があります。
①exturn修飾子を付けて、「実態ではない」扱いにする。
　　　ただしこの場合、どこかのcppに実体を置かなければ
　　　ならない。
②static修飾子をつける。

exturnをつけると、その変数は「仮の」変数になり
メモリを食いつぶさない。
映画館で言うと、チケット（前売り券、招待券）みたいなもん
チケットだけじゃ映画は見れません。
ちけっともって、　映画館に行かないと映画は見れないです。

exturnは注意点があって、あくまでも「仮の」なので、
別に実体を作っておかなければならない（メモリを確保）。

staticは何なのか？exturnとは全然違う。
staticはアプリケーション内で「1個しかない」ことを
保証する・・・ということは、多重でその名前の宣言が
合っても同じ場所を見に行く。

別の翻訳単位で、同じ名前のものが見つかったら、すでに
確保してあるその場所に書き込み/読み込みに行く

staticはその性質上、Singletonクラスに応用される。
staticはローカル変数であっても、永続性をもつ
つまりスコープを抜けても生き続ける。


関数のプロトタイプ宣言とか、exturn関数exturn変数などは
「実体がない」→型の情報、名前の情報しかない。
たとえると、「映画のチケット」みたいなものです。

映画のチケットを持ってても、映画館に行かなきゃ
映画を見れない。

じゃあ、プログラムにおける「映画館」はというと
実際にメモリを確保した領域に書かれた実体（関数、変数）